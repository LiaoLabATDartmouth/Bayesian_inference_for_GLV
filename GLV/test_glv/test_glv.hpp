// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace test_glv_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 79> locations_array__ =
  {" (found before start of program)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 24, column 1 to column 33)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 25, column 1 to column 20)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 26, column 1 to column 36)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 27, column 1 to column 27)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 28, column 1 to column 27)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 29, column 1 to column 44)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 30, column 1 to column 42)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 31, column 1 to column 20)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 32, column 1 to column 27)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 33, column 1 to column 36)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 34, column 1 to column 27)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 35, column 1 to column 44)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 36, column 1 to column 42)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 37, column 1 to column 20)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 38, column 1 to column 27)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 39, column 1 to column 27)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 40, column 1 to column 36)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 41, column 1 to column 44)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 42, column 1 to column 42)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 45, column 1 to column 26)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 46, column 1 to column 34)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 47, column 1 to column 41)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 48, column 1 to column 41)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 49, column 1 to column 41)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 50, column 1 to column 58)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 51, column 1 to column 56)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 52, column 1 to column 34)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 53, column 1 to column 41)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 54, column 1 to column 41)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 55, column 1 to column 41)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 56, column 1 to column 58)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 57, column 1 to column 56)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 58, column 1 to column 34)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 59, column 1 to column 41)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 60, column 1 to column 41)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 61, column 1 to column 41)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 62, column 1 to column 58)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 63, column 1 to column 56)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 64, column 1 to column 1026)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 2, column 1 to column 16)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 3, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 3, column 1 to column 17)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 4, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 4, column 1 to column 26)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 5, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 5, column 1 to column 39)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 6, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 6, column 1 to column 39)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 7, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 7, column 1 to column 39)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 8, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 8, column 1 to column 54)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 9, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 9, column 1 to column 52)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 10, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 10, column 1 to column 26)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 11, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 11, column 1 to column 39)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 12, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 12, column 1 to column 39)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 13, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 13, column 1 to column 39)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 14, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 14, column 1 to column 54)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 15, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 15, column 1 to column 52)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 16, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 16, column 1 to column 26)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 17, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 17, column 1 to column 39)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 18, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 18, column 1 to column 39)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 19, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 19, column 1 to column 39)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 20, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 20, column 1 to column 54)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 21, column 8 to column 9)",
  " (in '/Users/chenliao/Documents/MetabolicFluxModelingTutorial/Ecological-network-inference/GLV/test_glv/test_glv.stan', line 21, column 1 to column 52)"};
class test_glv_model final : public model_base_crtp<test_glv_model> {
 private:
  int N;
  Eigen::Matrix<double,-1,1> dlogX_data__;
  Eigen::Matrix<double,-1,1> growth_Taxon_1_data__;
  Eigen::Matrix<double,-1,1> interaction_Taxon_1_Taxon_1_data__;
  Eigen::Matrix<double,-1,1> interaction_Taxon_1_Taxon_2_data__;
  Eigen::Matrix<double,-1,1> interaction_Taxon_1_Taxon_3_data__;
  Eigen::Matrix<double,-1,1>
    perturbation_Taxon_1_Perturbation_Periodic_data__;
  Eigen::Matrix<double,-1,1> perturbation_Taxon_1_Perturbation_Square_data__;
  Eigen::Matrix<double,-1,1> growth_Taxon_2_data__;
  Eigen::Matrix<double,-1,1> interaction_Taxon_2_Taxon_1_data__;
  Eigen::Matrix<double,-1,1> interaction_Taxon_2_Taxon_2_data__;
  Eigen::Matrix<double,-1,1> interaction_Taxon_2_Taxon_3_data__;
  Eigen::Matrix<double,-1,1>
    perturbation_Taxon_2_Perturbation_Periodic_data__;
  Eigen::Matrix<double,-1,1> perturbation_Taxon_2_Perturbation_Square_data__;
  Eigen::Matrix<double,-1,1> growth_Taxon_3_data__;
  Eigen::Matrix<double,-1,1> interaction_Taxon_3_Taxon_1_data__;
  Eigen::Matrix<double,-1,1> interaction_Taxon_3_Taxon_2_data__;
  Eigen::Matrix<double,-1,1> interaction_Taxon_3_Taxon_3_data__;
  Eigen::Matrix<double,-1,1>
    perturbation_Taxon_3_Perturbation_Periodic_data__;
  Eigen::Matrix<double,-1,1> perturbation_Taxon_3_Perturbation_Square_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> dlogX{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> growth_Taxon_1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    interaction_Taxon_1_Taxon_1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    interaction_Taxon_1_Taxon_2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    interaction_Taxon_1_Taxon_3{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    perturbation_Taxon_1_Perturbation_Periodic{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    perturbation_Taxon_1_Perturbation_Square{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> growth_Taxon_2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    interaction_Taxon_2_Taxon_1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    interaction_Taxon_2_Taxon_2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    interaction_Taxon_2_Taxon_3{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    perturbation_Taxon_2_Perturbation_Periodic{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    perturbation_Taxon_2_Perturbation_Square{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> growth_Taxon_3{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    interaction_Taxon_3_Taxon_1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    interaction_Taxon_3_Taxon_2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    interaction_Taxon_3_Taxon_3{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    perturbation_Taxon_3_Perturbation_Periodic{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>>
    perturbation_Taxon_3_Perturbation_Square{nullptr, 0};
 public:
  ~test_glv_model() {}
  test_glv_model(stan::io::var_context& context__, unsigned int
                 random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "test_glv_model_namespace::test_glv_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 40;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 40;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("dlogX", "N", N);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "dlogX", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      dlogX_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&dlogX)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(dlogX_data__.data(), N);
      {
        std::vector<local_scalar_t__> dlogX_flat__;
        current_statement__ = 42;
        dlogX_flat__ = context__.vals_r("dlogX");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(dlogX, dlogX_flat__[(pos__ - 1)],
            "assigning variable dlogX", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 43;
      stan::math::validate_non_negative_index("growth_Taxon_1", "N", N);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "growth_Taxon_1",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      growth_Taxon_1_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                std::numeric_limits<double>::quiet_NaN());
      new (&growth_Taxon_1)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(growth_Taxon_1_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> growth_Taxon_1_flat__;
        current_statement__ = 44;
        growth_Taxon_1_flat__ = context__.vals_r("growth_Taxon_1");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(growth_Taxon_1, growth_Taxon_1_flat__[(pos__ -
            1)], "assigning variable growth_Taxon_1",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 45;
      stan::math::validate_non_negative_index("interaction_Taxon_1_Taxon_1",
        "N", N);
      current_statement__ = 46;
      context__.validate_dims("data initialization",
        "interaction_Taxon_1_Taxon_1", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      interaction_Taxon_1_Taxon_1_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                             std::numeric_limits<double>::quiet_NaN(
                                               ));
      new (&interaction_Taxon_1_Taxon_1)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(interaction_Taxon_1_Taxon_1_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> interaction_Taxon_1_Taxon_1_flat__;
        current_statement__ = 46;
        interaction_Taxon_1_Taxon_1_flat__ = context__.vals_r("interaction_Taxon_1_Taxon_1");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(interaction_Taxon_1_Taxon_1,
            interaction_Taxon_1_Taxon_1_flat__[(pos__ - 1)],
            "assigning variable interaction_Taxon_1_Taxon_1",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 47;
      stan::math::validate_non_negative_index("interaction_Taxon_1_Taxon_2",
        "N", N);
      current_statement__ = 48;
      context__.validate_dims("data initialization",
        "interaction_Taxon_1_Taxon_2", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      interaction_Taxon_1_Taxon_2_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                             std::numeric_limits<double>::quiet_NaN(
                                               ));
      new (&interaction_Taxon_1_Taxon_2)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(interaction_Taxon_1_Taxon_2_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> interaction_Taxon_1_Taxon_2_flat__;
        current_statement__ = 48;
        interaction_Taxon_1_Taxon_2_flat__ = context__.vals_r("interaction_Taxon_1_Taxon_2");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(interaction_Taxon_1_Taxon_2,
            interaction_Taxon_1_Taxon_2_flat__[(pos__ - 1)],
            "assigning variable interaction_Taxon_1_Taxon_2",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 49;
      stan::math::validate_non_negative_index("interaction_Taxon_1_Taxon_3",
        "N", N);
      current_statement__ = 50;
      context__.validate_dims("data initialization",
        "interaction_Taxon_1_Taxon_3", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      interaction_Taxon_1_Taxon_3_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                             std::numeric_limits<double>::quiet_NaN(
                                               ));
      new (&interaction_Taxon_1_Taxon_3)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(interaction_Taxon_1_Taxon_3_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> interaction_Taxon_1_Taxon_3_flat__;
        current_statement__ = 50;
        interaction_Taxon_1_Taxon_3_flat__ = context__.vals_r("interaction_Taxon_1_Taxon_3");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(interaction_Taxon_1_Taxon_3,
            interaction_Taxon_1_Taxon_3_flat__[(pos__ - 1)],
            "assigning variable interaction_Taxon_1_Taxon_3",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 51;
      stan::math::validate_non_negative_index(
        "perturbation_Taxon_1_Perturbation_Periodic", "N", N);
      current_statement__ = 52;
      context__.validate_dims("data initialization",
        "perturbation_Taxon_1_Perturbation_Periodic", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      perturbation_Taxon_1_Perturbation_Periodic_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                                            std::numeric_limits<double>::quiet_NaN(
                                                              ));
      new (&perturbation_Taxon_1_Perturbation_Periodic)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(perturbation_Taxon_1_Perturbation_Periodic_data__.data(),
        N);
      {
        std::vector<local_scalar_t__>
          perturbation_Taxon_1_Perturbation_Periodic_flat__;
        current_statement__ = 52;
        perturbation_Taxon_1_Perturbation_Periodic_flat__ = context__.vals_r("perturbation_Taxon_1_Perturbation_Periodic");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(perturbation_Taxon_1_Perturbation_Periodic,
            perturbation_Taxon_1_Perturbation_Periodic_flat__[(pos__ - 1)],
            "assigning variable perturbation_Taxon_1_Perturbation_Periodic",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 53;
      stan::math::validate_non_negative_index(
        "perturbation_Taxon_1_Perturbation_Square", "N", N);
      current_statement__ = 54;
      context__.validate_dims("data initialization",
        "perturbation_Taxon_1_Perturbation_Square", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      perturbation_Taxon_1_Perturbation_Square_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                                          std::numeric_limits<double>::quiet_NaN(
                                                            ));
      new (&perturbation_Taxon_1_Perturbation_Square)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(perturbation_Taxon_1_Perturbation_Square_data__.data(),
        N);
      {
        std::vector<local_scalar_t__>
          perturbation_Taxon_1_Perturbation_Square_flat__;
        current_statement__ = 54;
        perturbation_Taxon_1_Perturbation_Square_flat__ = context__.vals_r("perturbation_Taxon_1_Perturbation_Square");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(perturbation_Taxon_1_Perturbation_Square,
            perturbation_Taxon_1_Perturbation_Square_flat__[(pos__ - 1)],
            "assigning variable perturbation_Taxon_1_Perturbation_Square",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 55;
      stan::math::validate_non_negative_index("growth_Taxon_2", "N", N);
      current_statement__ = 56;
      context__.validate_dims("data initialization", "growth_Taxon_2",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      growth_Taxon_2_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                std::numeric_limits<double>::quiet_NaN());
      new (&growth_Taxon_2)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(growth_Taxon_2_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> growth_Taxon_2_flat__;
        current_statement__ = 56;
        growth_Taxon_2_flat__ = context__.vals_r("growth_Taxon_2");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(growth_Taxon_2, growth_Taxon_2_flat__[(pos__ -
            1)], "assigning variable growth_Taxon_2",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 57;
      stan::math::validate_non_negative_index("interaction_Taxon_2_Taxon_1",
        "N", N);
      current_statement__ = 58;
      context__.validate_dims("data initialization",
        "interaction_Taxon_2_Taxon_1", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      interaction_Taxon_2_Taxon_1_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                             std::numeric_limits<double>::quiet_NaN(
                                               ));
      new (&interaction_Taxon_2_Taxon_1)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(interaction_Taxon_2_Taxon_1_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> interaction_Taxon_2_Taxon_1_flat__;
        current_statement__ = 58;
        interaction_Taxon_2_Taxon_1_flat__ = context__.vals_r("interaction_Taxon_2_Taxon_1");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(interaction_Taxon_2_Taxon_1,
            interaction_Taxon_2_Taxon_1_flat__[(pos__ - 1)],
            "assigning variable interaction_Taxon_2_Taxon_1",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 59;
      stan::math::validate_non_negative_index("interaction_Taxon_2_Taxon_2",
        "N", N);
      current_statement__ = 60;
      context__.validate_dims("data initialization",
        "interaction_Taxon_2_Taxon_2", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      interaction_Taxon_2_Taxon_2_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                             std::numeric_limits<double>::quiet_NaN(
                                               ));
      new (&interaction_Taxon_2_Taxon_2)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(interaction_Taxon_2_Taxon_2_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> interaction_Taxon_2_Taxon_2_flat__;
        current_statement__ = 60;
        interaction_Taxon_2_Taxon_2_flat__ = context__.vals_r("interaction_Taxon_2_Taxon_2");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(interaction_Taxon_2_Taxon_2,
            interaction_Taxon_2_Taxon_2_flat__[(pos__ - 1)],
            "assigning variable interaction_Taxon_2_Taxon_2",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 61;
      stan::math::validate_non_negative_index("interaction_Taxon_2_Taxon_3",
        "N", N);
      current_statement__ = 62;
      context__.validate_dims("data initialization",
        "interaction_Taxon_2_Taxon_3", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      interaction_Taxon_2_Taxon_3_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                             std::numeric_limits<double>::quiet_NaN(
                                               ));
      new (&interaction_Taxon_2_Taxon_3)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(interaction_Taxon_2_Taxon_3_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> interaction_Taxon_2_Taxon_3_flat__;
        current_statement__ = 62;
        interaction_Taxon_2_Taxon_3_flat__ = context__.vals_r("interaction_Taxon_2_Taxon_3");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(interaction_Taxon_2_Taxon_3,
            interaction_Taxon_2_Taxon_3_flat__[(pos__ - 1)],
            "assigning variable interaction_Taxon_2_Taxon_3",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 63;
      stan::math::validate_non_negative_index(
        "perturbation_Taxon_2_Perturbation_Periodic", "N", N);
      current_statement__ = 64;
      context__.validate_dims("data initialization",
        "perturbation_Taxon_2_Perturbation_Periodic", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      perturbation_Taxon_2_Perturbation_Periodic_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                                            std::numeric_limits<double>::quiet_NaN(
                                                              ));
      new (&perturbation_Taxon_2_Perturbation_Periodic)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(perturbation_Taxon_2_Perturbation_Periodic_data__.data(),
        N);
      {
        std::vector<local_scalar_t__>
          perturbation_Taxon_2_Perturbation_Periodic_flat__;
        current_statement__ = 64;
        perturbation_Taxon_2_Perturbation_Periodic_flat__ = context__.vals_r("perturbation_Taxon_2_Perturbation_Periodic");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(perturbation_Taxon_2_Perturbation_Periodic,
            perturbation_Taxon_2_Perturbation_Periodic_flat__[(pos__ - 1)],
            "assigning variable perturbation_Taxon_2_Perturbation_Periodic",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 65;
      stan::math::validate_non_negative_index(
        "perturbation_Taxon_2_Perturbation_Square", "N", N);
      current_statement__ = 66;
      context__.validate_dims("data initialization",
        "perturbation_Taxon_2_Perturbation_Square", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      perturbation_Taxon_2_Perturbation_Square_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                                          std::numeric_limits<double>::quiet_NaN(
                                                            ));
      new (&perturbation_Taxon_2_Perturbation_Square)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(perturbation_Taxon_2_Perturbation_Square_data__.data(),
        N);
      {
        std::vector<local_scalar_t__>
          perturbation_Taxon_2_Perturbation_Square_flat__;
        current_statement__ = 66;
        perturbation_Taxon_2_Perturbation_Square_flat__ = context__.vals_r("perturbation_Taxon_2_Perturbation_Square");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(perturbation_Taxon_2_Perturbation_Square,
            perturbation_Taxon_2_Perturbation_Square_flat__[(pos__ - 1)],
            "assigning variable perturbation_Taxon_2_Perturbation_Square",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 67;
      stan::math::validate_non_negative_index("growth_Taxon_3", "N", N);
      current_statement__ = 68;
      context__.validate_dims("data initialization", "growth_Taxon_3",
        "double", std::vector<size_t>{static_cast<size_t>(N)});
      growth_Taxon_3_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                std::numeric_limits<double>::quiet_NaN());
      new (&growth_Taxon_3)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(growth_Taxon_3_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> growth_Taxon_3_flat__;
        current_statement__ = 68;
        growth_Taxon_3_flat__ = context__.vals_r("growth_Taxon_3");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(growth_Taxon_3, growth_Taxon_3_flat__[(pos__ -
            1)], "assigning variable growth_Taxon_3",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 69;
      stan::math::validate_non_negative_index("interaction_Taxon_3_Taxon_1",
        "N", N);
      current_statement__ = 70;
      context__.validate_dims("data initialization",
        "interaction_Taxon_3_Taxon_1", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      interaction_Taxon_3_Taxon_1_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                             std::numeric_limits<double>::quiet_NaN(
                                               ));
      new (&interaction_Taxon_3_Taxon_1)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(interaction_Taxon_3_Taxon_1_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> interaction_Taxon_3_Taxon_1_flat__;
        current_statement__ = 70;
        interaction_Taxon_3_Taxon_1_flat__ = context__.vals_r("interaction_Taxon_3_Taxon_1");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(interaction_Taxon_3_Taxon_1,
            interaction_Taxon_3_Taxon_1_flat__[(pos__ - 1)],
            "assigning variable interaction_Taxon_3_Taxon_1",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 71;
      stan::math::validate_non_negative_index("interaction_Taxon_3_Taxon_2",
        "N", N);
      current_statement__ = 72;
      context__.validate_dims("data initialization",
        "interaction_Taxon_3_Taxon_2", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      interaction_Taxon_3_Taxon_2_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                             std::numeric_limits<double>::quiet_NaN(
                                               ));
      new (&interaction_Taxon_3_Taxon_2)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(interaction_Taxon_3_Taxon_2_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> interaction_Taxon_3_Taxon_2_flat__;
        current_statement__ = 72;
        interaction_Taxon_3_Taxon_2_flat__ = context__.vals_r("interaction_Taxon_3_Taxon_2");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(interaction_Taxon_3_Taxon_2,
            interaction_Taxon_3_Taxon_2_flat__[(pos__ - 1)],
            "assigning variable interaction_Taxon_3_Taxon_2",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 73;
      stan::math::validate_non_negative_index("interaction_Taxon_3_Taxon_3",
        "N", N);
      current_statement__ = 74;
      context__.validate_dims("data initialization",
        "interaction_Taxon_3_Taxon_3", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      interaction_Taxon_3_Taxon_3_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                             std::numeric_limits<double>::quiet_NaN(
                                               ));
      new (&interaction_Taxon_3_Taxon_3)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(interaction_Taxon_3_Taxon_3_data__.data(),
        N);
      {
        std::vector<local_scalar_t__> interaction_Taxon_3_Taxon_3_flat__;
        current_statement__ = 74;
        interaction_Taxon_3_Taxon_3_flat__ = context__.vals_r("interaction_Taxon_3_Taxon_3");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(interaction_Taxon_3_Taxon_3,
            interaction_Taxon_3_Taxon_3_flat__[(pos__ - 1)],
            "assigning variable interaction_Taxon_3_Taxon_3",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 75;
      stan::math::validate_non_negative_index(
        "perturbation_Taxon_3_Perturbation_Periodic", "N", N);
      current_statement__ = 76;
      context__.validate_dims("data initialization",
        "perturbation_Taxon_3_Perturbation_Periodic", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      perturbation_Taxon_3_Perturbation_Periodic_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                                            std::numeric_limits<double>::quiet_NaN(
                                                              ));
      new (&perturbation_Taxon_3_Perturbation_Periodic)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(perturbation_Taxon_3_Perturbation_Periodic_data__.data(),
        N);
      {
        std::vector<local_scalar_t__>
          perturbation_Taxon_3_Perturbation_Periodic_flat__;
        current_statement__ = 76;
        perturbation_Taxon_3_Perturbation_Periodic_flat__ = context__.vals_r("perturbation_Taxon_3_Perturbation_Periodic");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(perturbation_Taxon_3_Perturbation_Periodic,
            perturbation_Taxon_3_Perturbation_Periodic_flat__[(pos__ - 1)],
            "assigning variable perturbation_Taxon_3_Perturbation_Periodic",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 77;
      stan::math::validate_non_negative_index(
        "perturbation_Taxon_3_Perturbation_Square", "N", N);
      current_statement__ = 78;
      context__.validate_dims("data initialization",
        "perturbation_Taxon_3_Perturbation_Square", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      perturbation_Taxon_3_Perturbation_Square_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                                                          std::numeric_limits<double>::quiet_NaN(
                                                            ));
      new (&perturbation_Taxon_3_Perturbation_Square)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(perturbation_Taxon_3_Perturbation_Square_data__.data(),
        N);
      {
        std::vector<local_scalar_t__>
          perturbation_Taxon_3_Perturbation_Square_flat__;
        current_statement__ = 78;
        perturbation_Taxon_3_Perturbation_Square_flat__ = context__.vals_r("perturbation_Taxon_3_Perturbation_Square");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          stan::model::assign(perturbation_Taxon_3_Perturbation_Square,
            perturbation_Taxon_3_Perturbation_Square_flat__[(pos__ - 1)],
            "assigning variable perturbation_Taxon_3_Perturbation_Square",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 +
      1 + 1 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "test_glv_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = "};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "test_glv_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 1;
      sigma = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(0, 14.04, lp__);
      local_scalar_t__ alpha_Taxon_1 = DUMMY_VAR__;
      current_statement__ = 2;
      alpha_Taxon_1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_Taxon_1_Taxon_1 = DUMMY_VAR__;
      current_statement__ = 3;
      beta_Taxon_1_Taxon_1 = in__.template read_constrain_ub<
                               local_scalar_t__, jacobian__>(0, lp__);
      local_scalar_t__ beta_Taxon_1_Taxon_2 = DUMMY_VAR__;
      current_statement__ = 4;
      beta_Taxon_1_Taxon_2 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_Taxon_1_Taxon_3 = DUMMY_VAR__;
      current_statement__ = 5;
      beta_Taxon_1_Taxon_3 = in__.template read<local_scalar_t__>();
      local_scalar_t__ epsilon_Taxon_1_Perturbation_Periodic = DUMMY_VAR__;
      current_statement__ = 6;
      epsilon_Taxon_1_Perturbation_Periodic = in__.template read<
                                                local_scalar_t__>();
      local_scalar_t__ epsilon_Taxon_1_Perturbation_Square = DUMMY_VAR__;
      current_statement__ = 7;
      epsilon_Taxon_1_Perturbation_Square = in__.template read<
                                              local_scalar_t__>();
      local_scalar_t__ alpha_Taxon_2 = DUMMY_VAR__;
      current_statement__ = 8;
      alpha_Taxon_2 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_Taxon_2_Taxon_1 = DUMMY_VAR__;
      current_statement__ = 9;
      beta_Taxon_2_Taxon_1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_Taxon_2_Taxon_2 = DUMMY_VAR__;
      current_statement__ = 10;
      beta_Taxon_2_Taxon_2 = in__.template read_constrain_ub<
                               local_scalar_t__, jacobian__>(0, lp__);
      local_scalar_t__ beta_Taxon_2_Taxon_3 = DUMMY_VAR__;
      current_statement__ = 11;
      beta_Taxon_2_Taxon_3 = in__.template read<local_scalar_t__>();
      local_scalar_t__ epsilon_Taxon_2_Perturbation_Periodic = DUMMY_VAR__;
      current_statement__ = 12;
      epsilon_Taxon_2_Perturbation_Periodic = in__.template read<
                                                local_scalar_t__>();
      local_scalar_t__ epsilon_Taxon_2_Perturbation_Square = DUMMY_VAR__;
      current_statement__ = 13;
      epsilon_Taxon_2_Perturbation_Square = in__.template read<
                                              local_scalar_t__>();
      local_scalar_t__ alpha_Taxon_3 = DUMMY_VAR__;
      current_statement__ = 14;
      alpha_Taxon_3 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_Taxon_3_Taxon_1 = DUMMY_VAR__;
      current_statement__ = 15;
      beta_Taxon_3_Taxon_1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_Taxon_3_Taxon_2 = DUMMY_VAR__;
      current_statement__ = 16;
      beta_Taxon_3_Taxon_2 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_Taxon_3_Taxon_3 = DUMMY_VAR__;
      current_statement__ = 17;
      beta_Taxon_3_Taxon_3 = in__.template read_constrain_ub<
                               local_scalar_t__, jacobian__>(0, lp__);
      local_scalar_t__ epsilon_Taxon_3_Perturbation_Periodic = DUMMY_VAR__;
      current_statement__ = 18;
      epsilon_Taxon_3_Perturbation_Periodic = in__.template read<
                                                local_scalar_t__>();
      local_scalar_t__ epsilon_Taxon_3_Perturbation_Square = DUMMY_VAR__;
      current_statement__ = 19;
      epsilon_Taxon_3_Perturbation_Square = in__.template read<
                                              local_scalar_t__>();
      {
        current_statement__ = 20;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(sigma, 0, 14.04));
        current_statement__ = 21;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_Taxon_1, 0,
                         100.00));
        current_statement__ = 22;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_1_Taxon_1, 0, 100.00));
        current_statement__ = 23;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_1_Taxon_2, 0, 100.00));
        current_statement__ = 24;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_1_Taxon_3, 0, 100.00));
        current_statement__ = 25;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         epsilon_Taxon_1_Perturbation_Periodic, 0, 100.00));
        current_statement__ = 26;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         epsilon_Taxon_1_Perturbation_Square, 0, 100.00));
        current_statement__ = 27;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_Taxon_2, 0,
                         100.00));
        current_statement__ = 28;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_2_Taxon_1, 0, 100.00));
        current_statement__ = 29;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_2_Taxon_2, 0, 100.00));
        current_statement__ = 30;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_2_Taxon_3, 0, 100.00));
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         epsilon_Taxon_2_Perturbation_Periodic, 0, 100.00));
        current_statement__ = 32;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         epsilon_Taxon_2_Perturbation_Square, 0, 100.00));
        current_statement__ = 33;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_Taxon_3, 0,
                         100.00));
        current_statement__ = 34;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_3_Taxon_1, 0, 100.00));
        current_statement__ = 35;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_3_Taxon_2, 0, 100.00));
        current_statement__ = 36;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_3_Taxon_3, 0, 100.00));
        current_statement__ = 37;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         epsilon_Taxon_3_Perturbation_Periodic, 0, 100.00));
        current_statement__ = 38;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         epsilon_Taxon_3_Perturbation_Square, 0, 100.00));
        current_statement__ = 39;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(dlogX,
                         stan::math::add(
                           stan::math::add(
                             stan::math::add(
                               stan::math::add(
                                 stan::math::add(
                                   stan::math::add(
                                     stan::math::add(
                                       stan::math::add(
                                         stan::math::add(
                                           stan::math::add(
                                             stan::math::add(
                                               stan::math::add(
                                                 stan::math::add(
                                                   stan::math::add(
                                                     stan::math::add(
                                                       stan::math::add(
                                                         stan::math::add(
                                                           stan::math::multiply(
                                                             alpha_Taxon_1,
                                                             growth_Taxon_1),
                                                           stan::math::multiply(
                                                             beta_Taxon_1_Taxon_1,
                                                             interaction_Taxon_1_Taxon_1)),
                                                         stan::math::multiply(
                                                           beta_Taxon_1_Taxon_2,
                                                           interaction_Taxon_1_Taxon_2)),
                                                       stan::math::multiply(
                                                         beta_Taxon_1_Taxon_3,
                                                         interaction_Taxon_1_Taxon_3)),
                                                     stan::math::multiply(
                                                       epsilon_Taxon_1_Perturbation_Periodic,
                                                       perturbation_Taxon_1_Perturbation_Periodic)),
                                                   stan::math::multiply(
                                                     epsilon_Taxon_1_Perturbation_Square,
                                                     perturbation_Taxon_1_Perturbation_Square)),
                                                 stan::math::multiply(
                                                   alpha_Taxon_2,
                                                   growth_Taxon_2)),
                                               stan::math::multiply(
                                                 beta_Taxon_2_Taxon_1,
                                                 interaction_Taxon_2_Taxon_1)),
                                             stan::math::multiply(
                                               beta_Taxon_2_Taxon_2,
                                               interaction_Taxon_2_Taxon_2)),
                                           stan::math::multiply(
                                             beta_Taxon_2_Taxon_3,
                                             interaction_Taxon_2_Taxon_3)),
                                         stan::math::multiply(
                                           epsilon_Taxon_2_Perturbation_Periodic,
                                           perturbation_Taxon_2_Perturbation_Periodic)),
                                       stan::math::multiply(
                                         epsilon_Taxon_2_Perturbation_Square,
                                         perturbation_Taxon_2_Perturbation_Square)),
                                     stan::math::multiply(alpha_Taxon_3,
                                       growth_Taxon_3)),
                                   stan::math::multiply(beta_Taxon_3_Taxon_1,
                                     interaction_Taxon_3_Taxon_1)),
                                 stan::math::multiply(beta_Taxon_3_Taxon_2,
                                   interaction_Taxon_3_Taxon_2)),
                               stan::math::multiply(beta_Taxon_3_Taxon_3,
                                 interaction_Taxon_3_Taxon_3)),
                             stan::math::multiply(
                               epsilon_Taxon_3_Perturbation_Periodic,
                               perturbation_Taxon_3_Perturbation_Periodic)),
                           stan::math::multiply(
                             epsilon_Taxon_3_Perturbation_Square,
                             perturbation_Taxon_3_Perturbation_Square)),
                         sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "test_glv_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 1;
      sigma = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(0, 14.04, lp__);
      local_scalar_t__ alpha_Taxon_1 = DUMMY_VAR__;
      current_statement__ = 2;
      alpha_Taxon_1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_Taxon_1_Taxon_1 = DUMMY_VAR__;
      current_statement__ = 3;
      beta_Taxon_1_Taxon_1 = in__.template read_constrain_ub<
                               local_scalar_t__, jacobian__>(0, lp__);
      local_scalar_t__ beta_Taxon_1_Taxon_2 = DUMMY_VAR__;
      current_statement__ = 4;
      beta_Taxon_1_Taxon_2 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_Taxon_1_Taxon_3 = DUMMY_VAR__;
      current_statement__ = 5;
      beta_Taxon_1_Taxon_3 = in__.template read<local_scalar_t__>();
      local_scalar_t__ epsilon_Taxon_1_Perturbation_Periodic = DUMMY_VAR__;
      current_statement__ = 6;
      epsilon_Taxon_1_Perturbation_Periodic = in__.template read<
                                                local_scalar_t__>();
      local_scalar_t__ epsilon_Taxon_1_Perturbation_Square = DUMMY_VAR__;
      current_statement__ = 7;
      epsilon_Taxon_1_Perturbation_Square = in__.template read<
                                              local_scalar_t__>();
      local_scalar_t__ alpha_Taxon_2 = DUMMY_VAR__;
      current_statement__ = 8;
      alpha_Taxon_2 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_Taxon_2_Taxon_1 = DUMMY_VAR__;
      current_statement__ = 9;
      beta_Taxon_2_Taxon_1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_Taxon_2_Taxon_2 = DUMMY_VAR__;
      current_statement__ = 10;
      beta_Taxon_2_Taxon_2 = in__.template read_constrain_ub<
                               local_scalar_t__, jacobian__>(0, lp__);
      local_scalar_t__ beta_Taxon_2_Taxon_3 = DUMMY_VAR__;
      current_statement__ = 11;
      beta_Taxon_2_Taxon_3 = in__.template read<local_scalar_t__>();
      local_scalar_t__ epsilon_Taxon_2_Perturbation_Periodic = DUMMY_VAR__;
      current_statement__ = 12;
      epsilon_Taxon_2_Perturbation_Periodic = in__.template read<
                                                local_scalar_t__>();
      local_scalar_t__ epsilon_Taxon_2_Perturbation_Square = DUMMY_VAR__;
      current_statement__ = 13;
      epsilon_Taxon_2_Perturbation_Square = in__.template read<
                                              local_scalar_t__>();
      local_scalar_t__ alpha_Taxon_3 = DUMMY_VAR__;
      current_statement__ = 14;
      alpha_Taxon_3 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_Taxon_3_Taxon_1 = DUMMY_VAR__;
      current_statement__ = 15;
      beta_Taxon_3_Taxon_1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_Taxon_3_Taxon_2 = DUMMY_VAR__;
      current_statement__ = 16;
      beta_Taxon_3_Taxon_2 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_Taxon_3_Taxon_3 = DUMMY_VAR__;
      current_statement__ = 17;
      beta_Taxon_3_Taxon_3 = in__.template read_constrain_ub<
                               local_scalar_t__, jacobian__>(0, lp__);
      local_scalar_t__ epsilon_Taxon_3_Perturbation_Periodic = DUMMY_VAR__;
      current_statement__ = 18;
      epsilon_Taxon_3_Perturbation_Periodic = in__.template read<
                                                local_scalar_t__>();
      local_scalar_t__ epsilon_Taxon_3_Perturbation_Square = DUMMY_VAR__;
      current_statement__ = 19;
      epsilon_Taxon_3_Perturbation_Square = in__.template read<
                                              local_scalar_t__>();
      {
        current_statement__ = 20;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(sigma, 0, 14.04));
        current_statement__ = 21;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_Taxon_1, 0,
                         100.00));
        current_statement__ = 22;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_1_Taxon_1, 0, 100.00));
        current_statement__ = 23;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_1_Taxon_2, 0, 100.00));
        current_statement__ = 24;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_1_Taxon_3, 0, 100.00));
        current_statement__ = 25;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         epsilon_Taxon_1_Perturbation_Periodic, 0, 100.00));
        current_statement__ = 26;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         epsilon_Taxon_1_Perturbation_Square, 0, 100.00));
        current_statement__ = 27;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_Taxon_2, 0,
                         100.00));
        current_statement__ = 28;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_2_Taxon_1, 0, 100.00));
        current_statement__ = 29;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_2_Taxon_2, 0, 100.00));
        current_statement__ = 30;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_2_Taxon_3, 0, 100.00));
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         epsilon_Taxon_2_Perturbation_Periodic, 0, 100.00));
        current_statement__ = 32;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         epsilon_Taxon_2_Perturbation_Square, 0, 100.00));
        current_statement__ = 33;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_Taxon_3, 0,
                         100.00));
        current_statement__ = 34;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_3_Taxon_1, 0, 100.00));
        current_statement__ = 35;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_3_Taxon_2, 0, 100.00));
        current_statement__ = 36;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         beta_Taxon_3_Taxon_3, 0, 100.00));
        current_statement__ = 37;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         epsilon_Taxon_3_Perturbation_Periodic, 0, 100.00));
        current_statement__ = 38;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         epsilon_Taxon_3_Perturbation_Square, 0, 100.00));
        current_statement__ = 39;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(dlogX,
                         stan::math::add(
                           stan::math::add(
                             stan::math::add(
                               stan::math::add(
                                 stan::math::add(
                                   stan::math::add(
                                     stan::math::add(
                                       stan::math::add(
                                         stan::math::add(
                                           stan::math::add(
                                             stan::math::add(
                                               stan::math::add(
                                                 stan::math::add(
                                                   stan::math::add(
                                                     stan::math::add(
                                                       stan::math::add(
                                                         stan::math::add(
                                                           stan::math::multiply(
                                                             alpha_Taxon_1,
                                                             growth_Taxon_1),
                                                           stan::math::multiply(
                                                             beta_Taxon_1_Taxon_1,
                                                             interaction_Taxon_1_Taxon_1)),
                                                         stan::math::multiply(
                                                           beta_Taxon_1_Taxon_2,
                                                           interaction_Taxon_1_Taxon_2)),
                                                       stan::math::multiply(
                                                         beta_Taxon_1_Taxon_3,
                                                         interaction_Taxon_1_Taxon_3)),
                                                     stan::math::multiply(
                                                       epsilon_Taxon_1_Perturbation_Periodic,
                                                       perturbation_Taxon_1_Perturbation_Periodic)),
                                                   stan::math::multiply(
                                                     epsilon_Taxon_1_Perturbation_Square,
                                                     perturbation_Taxon_1_Perturbation_Square)),
                                                 stan::math::multiply(
                                                   alpha_Taxon_2,
                                                   growth_Taxon_2)),
                                               stan::math::multiply(
                                                 beta_Taxon_2_Taxon_1,
                                                 interaction_Taxon_2_Taxon_1)),
                                             stan::math::multiply(
                                               beta_Taxon_2_Taxon_2,
                                               interaction_Taxon_2_Taxon_2)),
                                           stan::math::multiply(
                                             beta_Taxon_2_Taxon_3,
                                             interaction_Taxon_2_Taxon_3)),
                                         stan::math::multiply(
                                           epsilon_Taxon_2_Perturbation_Periodic,
                                           perturbation_Taxon_2_Perturbation_Periodic)),
                                       stan::math::multiply(
                                         epsilon_Taxon_2_Perturbation_Square,
                                         perturbation_Taxon_2_Perturbation_Square)),
                                     stan::math::multiply(alpha_Taxon_3,
                                       growth_Taxon_3)),
                                   stan::math::multiply(beta_Taxon_3_Taxon_1,
                                     interaction_Taxon_3_Taxon_1)),
                                 stan::math::multiply(beta_Taxon_3_Taxon_2,
                                   interaction_Taxon_3_Taxon_2)),
                               stan::math::multiply(beta_Taxon_3_Taxon_3,
                                 interaction_Taxon_3_Taxon_3)),
                             stan::math::multiply(
                               epsilon_Taxon_3_Perturbation_Periodic,
                               perturbation_Taxon_3_Perturbation_Periodic)),
                           stan::math::multiply(
                             epsilon_Taxon_3_Perturbation_Square,
                             perturbation_Taxon_3_Perturbation_Square)),
                         sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "test_glv_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      sigma = in__.template read_constrain_lub<local_scalar_t__,
                jacobian__>(0, 14.04, lp__);
      double alpha_Taxon_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      alpha_Taxon_1 = in__.template read<local_scalar_t__>();
      double beta_Taxon_1_Taxon_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      beta_Taxon_1_Taxon_1 = in__.template read_constrain_ub<
                               local_scalar_t__, jacobian__>(0, lp__);
      double beta_Taxon_1_Taxon_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      beta_Taxon_1_Taxon_2 = in__.template read<local_scalar_t__>();
      double beta_Taxon_1_Taxon_3 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      beta_Taxon_1_Taxon_3 = in__.template read<local_scalar_t__>();
      double epsilon_Taxon_1_Perturbation_Periodic =
        std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      epsilon_Taxon_1_Perturbation_Periodic = in__.template read<
                                                local_scalar_t__>();
      double epsilon_Taxon_1_Perturbation_Square =
        std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      epsilon_Taxon_1_Perturbation_Square = in__.template read<
                                              local_scalar_t__>();
      double alpha_Taxon_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      alpha_Taxon_2 = in__.template read<local_scalar_t__>();
      double beta_Taxon_2_Taxon_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      beta_Taxon_2_Taxon_1 = in__.template read<local_scalar_t__>();
      double beta_Taxon_2_Taxon_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      beta_Taxon_2_Taxon_2 = in__.template read_constrain_ub<
                               local_scalar_t__, jacobian__>(0, lp__);
      double beta_Taxon_2_Taxon_3 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      beta_Taxon_2_Taxon_3 = in__.template read<local_scalar_t__>();
      double epsilon_Taxon_2_Perturbation_Periodic =
        std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 12;
      epsilon_Taxon_2_Perturbation_Periodic = in__.template read<
                                                local_scalar_t__>();
      double epsilon_Taxon_2_Perturbation_Square =
        std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 13;
      epsilon_Taxon_2_Perturbation_Square = in__.template read<
                                              local_scalar_t__>();
      double alpha_Taxon_3 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 14;
      alpha_Taxon_3 = in__.template read<local_scalar_t__>();
      double beta_Taxon_3_Taxon_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 15;
      beta_Taxon_3_Taxon_1 = in__.template read<local_scalar_t__>();
      double beta_Taxon_3_Taxon_2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 16;
      beta_Taxon_3_Taxon_2 = in__.template read<local_scalar_t__>();
      double beta_Taxon_3_Taxon_3 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 17;
      beta_Taxon_3_Taxon_3 = in__.template read_constrain_ub<
                               local_scalar_t__, jacobian__>(0, lp__);
      double epsilon_Taxon_3_Perturbation_Periodic =
        std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 18;
      epsilon_Taxon_3_Perturbation_Periodic = in__.template read<
                                                local_scalar_t__>();
      double epsilon_Taxon_3_Perturbation_Square =
        std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 19;
      epsilon_Taxon_3_Perturbation_Square = in__.template read<
                                              local_scalar_t__>();
      out__.write(sigma);
      out__.write(alpha_Taxon_1);
      out__.write(beta_Taxon_1_Taxon_1);
      out__.write(beta_Taxon_1_Taxon_2);
      out__.write(beta_Taxon_1_Taxon_3);
      out__.write(epsilon_Taxon_1_Perturbation_Periodic);
      out__.write(epsilon_Taxon_1_Perturbation_Square);
      out__.write(alpha_Taxon_2);
      out__.write(beta_Taxon_2_Taxon_1);
      out__.write(beta_Taxon_2_Taxon_2);
      out__.write(beta_Taxon_2_Taxon_3);
      out__.write(epsilon_Taxon_2_Perturbation_Periodic);
      out__.write(epsilon_Taxon_2_Perturbation_Square);
      out__.write(alpha_Taxon_3);
      out__.write(beta_Taxon_3_Taxon_1);
      out__.write(beta_Taxon_3_Taxon_2);
      out__.write(beta_Taxon_3_Taxon_3);
      out__.write(epsilon_Taxon_3_Perturbation_Periodic);
      out__.write(epsilon_Taxon_3_Perturbation_Square);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 1;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 14.04, sigma);
      local_scalar_t__ alpha_Taxon_1 = DUMMY_VAR__;
      current_statement__ = 2;
      alpha_Taxon_1 = in__.read<local_scalar_t__>();
      out__.write(alpha_Taxon_1);
      local_scalar_t__ beta_Taxon_1_Taxon_1 = DUMMY_VAR__;
      current_statement__ = 3;
      beta_Taxon_1_Taxon_1 = in__.read<local_scalar_t__>();
      out__.write_free_ub(0, beta_Taxon_1_Taxon_1);
      local_scalar_t__ beta_Taxon_1_Taxon_2 = DUMMY_VAR__;
      current_statement__ = 4;
      beta_Taxon_1_Taxon_2 = in__.read<local_scalar_t__>();
      out__.write(beta_Taxon_1_Taxon_2);
      local_scalar_t__ beta_Taxon_1_Taxon_3 = DUMMY_VAR__;
      current_statement__ = 5;
      beta_Taxon_1_Taxon_3 = in__.read<local_scalar_t__>();
      out__.write(beta_Taxon_1_Taxon_3);
      local_scalar_t__ epsilon_Taxon_1_Perturbation_Periodic = DUMMY_VAR__;
      current_statement__ = 6;
      epsilon_Taxon_1_Perturbation_Periodic = in__.read<local_scalar_t__>();
      out__.write(epsilon_Taxon_1_Perturbation_Periodic);
      local_scalar_t__ epsilon_Taxon_1_Perturbation_Square = DUMMY_VAR__;
      current_statement__ = 7;
      epsilon_Taxon_1_Perturbation_Square = in__.read<local_scalar_t__>();
      out__.write(epsilon_Taxon_1_Perturbation_Square);
      local_scalar_t__ alpha_Taxon_2 = DUMMY_VAR__;
      current_statement__ = 8;
      alpha_Taxon_2 = in__.read<local_scalar_t__>();
      out__.write(alpha_Taxon_2);
      local_scalar_t__ beta_Taxon_2_Taxon_1 = DUMMY_VAR__;
      current_statement__ = 9;
      beta_Taxon_2_Taxon_1 = in__.read<local_scalar_t__>();
      out__.write(beta_Taxon_2_Taxon_1);
      local_scalar_t__ beta_Taxon_2_Taxon_2 = DUMMY_VAR__;
      current_statement__ = 10;
      beta_Taxon_2_Taxon_2 = in__.read<local_scalar_t__>();
      out__.write_free_ub(0, beta_Taxon_2_Taxon_2);
      local_scalar_t__ beta_Taxon_2_Taxon_3 = DUMMY_VAR__;
      current_statement__ = 11;
      beta_Taxon_2_Taxon_3 = in__.read<local_scalar_t__>();
      out__.write(beta_Taxon_2_Taxon_3);
      local_scalar_t__ epsilon_Taxon_2_Perturbation_Periodic = DUMMY_VAR__;
      current_statement__ = 12;
      epsilon_Taxon_2_Perturbation_Periodic = in__.read<local_scalar_t__>();
      out__.write(epsilon_Taxon_2_Perturbation_Periodic);
      local_scalar_t__ epsilon_Taxon_2_Perturbation_Square = DUMMY_VAR__;
      current_statement__ = 13;
      epsilon_Taxon_2_Perturbation_Square = in__.read<local_scalar_t__>();
      out__.write(epsilon_Taxon_2_Perturbation_Square);
      local_scalar_t__ alpha_Taxon_3 = DUMMY_VAR__;
      current_statement__ = 14;
      alpha_Taxon_3 = in__.read<local_scalar_t__>();
      out__.write(alpha_Taxon_3);
      local_scalar_t__ beta_Taxon_3_Taxon_1 = DUMMY_VAR__;
      current_statement__ = 15;
      beta_Taxon_3_Taxon_1 = in__.read<local_scalar_t__>();
      out__.write(beta_Taxon_3_Taxon_1);
      local_scalar_t__ beta_Taxon_3_Taxon_2 = DUMMY_VAR__;
      current_statement__ = 16;
      beta_Taxon_3_Taxon_2 = in__.read<local_scalar_t__>();
      out__.write(beta_Taxon_3_Taxon_2);
      local_scalar_t__ beta_Taxon_3_Taxon_3 = DUMMY_VAR__;
      current_statement__ = 17;
      beta_Taxon_3_Taxon_3 = in__.read<local_scalar_t__>();
      out__.write_free_ub(0, beta_Taxon_3_Taxon_3);
      local_scalar_t__ epsilon_Taxon_3_Perturbation_Periodic = DUMMY_VAR__;
      current_statement__ = 18;
      epsilon_Taxon_3_Perturbation_Periodic = in__.read<local_scalar_t__>();
      out__.write(epsilon_Taxon_3_Perturbation_Periodic);
      local_scalar_t__ epsilon_Taxon_3_Perturbation_Square = DUMMY_VAR__;
      current_statement__ = 19;
      epsilon_Taxon_3_Perturbation_Square = in__.read<local_scalar_t__>();
      out__.write(epsilon_Taxon_3_Perturbation_Square);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha_Taxon_1",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization",
        "beta_Taxon_1_Taxon_1", "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization",
        "beta_Taxon_1_Taxon_2", "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization",
        "beta_Taxon_1_Taxon_3", "double", std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization",
        "epsilon_Taxon_1_Perturbation_Periodic", "double",
        std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization",
        "epsilon_Taxon_1_Perturbation_Square", "double",
        std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "alpha_Taxon_2",
        "double", std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization",
        "beta_Taxon_2_Taxon_1", "double", std::vector<size_t>{});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization",
        "beta_Taxon_2_Taxon_2", "double", std::vector<size_t>{});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization",
        "beta_Taxon_2_Taxon_3", "double", std::vector<size_t>{});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization",
        "epsilon_Taxon_2_Perturbation_Periodic", "double",
        std::vector<size_t>{});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization",
        "epsilon_Taxon_2_Perturbation_Square", "double",
        std::vector<size_t>{});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization", "alpha_Taxon_3",
        "double", std::vector<size_t>{});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization",
        "beta_Taxon_3_Taxon_1", "double", std::vector<size_t>{});
      current_statement__ = 16;
      context__.validate_dims("parameter initialization",
        "beta_Taxon_3_Taxon_2", "double", std::vector<size_t>{});
      current_statement__ = 17;
      context__.validate_dims("parameter initialization",
        "beta_Taxon_3_Taxon_3", "double", std::vector<size_t>{});
      current_statement__ = 18;
      context__.validate_dims("parameter initialization",
        "epsilon_Taxon_3_Perturbation_Periodic", "double",
        std::vector<size_t>{});
      current_statement__ = 19;
      context__.validate_dims("parameter initialization",
        "epsilon_Taxon_3_Perturbation_Square", "double",
        std::vector<size_t>{});
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 1;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write_free_lub(0, 14.04, sigma);
      local_scalar_t__ alpha_Taxon_1 = DUMMY_VAR__;
      current_statement__ = 2;
      alpha_Taxon_1 = context__.vals_r("alpha_Taxon_1")[(1 - 1)];
      out__.write(alpha_Taxon_1);
      local_scalar_t__ beta_Taxon_1_Taxon_1 = DUMMY_VAR__;
      current_statement__ = 3;
      beta_Taxon_1_Taxon_1 = context__.vals_r("beta_Taxon_1_Taxon_1")[(1 -
        1)];
      out__.write_free_ub(0, beta_Taxon_1_Taxon_1);
      local_scalar_t__ beta_Taxon_1_Taxon_2 = DUMMY_VAR__;
      current_statement__ = 4;
      beta_Taxon_1_Taxon_2 = context__.vals_r("beta_Taxon_1_Taxon_2")[(1 -
        1)];
      out__.write(beta_Taxon_1_Taxon_2);
      local_scalar_t__ beta_Taxon_1_Taxon_3 = DUMMY_VAR__;
      current_statement__ = 5;
      beta_Taxon_1_Taxon_3 = context__.vals_r("beta_Taxon_1_Taxon_3")[(1 -
        1)];
      out__.write(beta_Taxon_1_Taxon_3);
      local_scalar_t__ epsilon_Taxon_1_Perturbation_Periodic = DUMMY_VAR__;
      current_statement__ = 6;
      epsilon_Taxon_1_Perturbation_Periodic = context__.vals_r("epsilon_Taxon_1_Perturbation_Periodic")[(1
        - 1)];
      out__.write(epsilon_Taxon_1_Perturbation_Periodic);
      local_scalar_t__ epsilon_Taxon_1_Perturbation_Square = DUMMY_VAR__;
      current_statement__ = 7;
      epsilon_Taxon_1_Perturbation_Square = context__.vals_r("epsilon_Taxon_1_Perturbation_Square")[(1
        - 1)];
      out__.write(epsilon_Taxon_1_Perturbation_Square);
      local_scalar_t__ alpha_Taxon_2 = DUMMY_VAR__;
      current_statement__ = 8;
      alpha_Taxon_2 = context__.vals_r("alpha_Taxon_2")[(1 - 1)];
      out__.write(alpha_Taxon_2);
      local_scalar_t__ beta_Taxon_2_Taxon_1 = DUMMY_VAR__;
      current_statement__ = 9;
      beta_Taxon_2_Taxon_1 = context__.vals_r("beta_Taxon_2_Taxon_1")[(1 -
        1)];
      out__.write(beta_Taxon_2_Taxon_1);
      local_scalar_t__ beta_Taxon_2_Taxon_2 = DUMMY_VAR__;
      current_statement__ = 10;
      beta_Taxon_2_Taxon_2 = context__.vals_r("beta_Taxon_2_Taxon_2")[(1 -
        1)];
      out__.write_free_ub(0, beta_Taxon_2_Taxon_2);
      local_scalar_t__ beta_Taxon_2_Taxon_3 = DUMMY_VAR__;
      current_statement__ = 11;
      beta_Taxon_2_Taxon_3 = context__.vals_r("beta_Taxon_2_Taxon_3")[(1 -
        1)];
      out__.write(beta_Taxon_2_Taxon_3);
      local_scalar_t__ epsilon_Taxon_2_Perturbation_Periodic = DUMMY_VAR__;
      current_statement__ = 12;
      epsilon_Taxon_2_Perturbation_Periodic = context__.vals_r("epsilon_Taxon_2_Perturbation_Periodic")[(1
        - 1)];
      out__.write(epsilon_Taxon_2_Perturbation_Periodic);
      local_scalar_t__ epsilon_Taxon_2_Perturbation_Square = DUMMY_VAR__;
      current_statement__ = 13;
      epsilon_Taxon_2_Perturbation_Square = context__.vals_r("epsilon_Taxon_2_Perturbation_Square")[(1
        - 1)];
      out__.write(epsilon_Taxon_2_Perturbation_Square);
      local_scalar_t__ alpha_Taxon_3 = DUMMY_VAR__;
      current_statement__ = 14;
      alpha_Taxon_3 = context__.vals_r("alpha_Taxon_3")[(1 - 1)];
      out__.write(alpha_Taxon_3);
      local_scalar_t__ beta_Taxon_3_Taxon_1 = DUMMY_VAR__;
      current_statement__ = 15;
      beta_Taxon_3_Taxon_1 = context__.vals_r("beta_Taxon_3_Taxon_1")[(1 -
        1)];
      out__.write(beta_Taxon_3_Taxon_1);
      local_scalar_t__ beta_Taxon_3_Taxon_2 = DUMMY_VAR__;
      current_statement__ = 16;
      beta_Taxon_3_Taxon_2 = context__.vals_r("beta_Taxon_3_Taxon_2")[(1 -
        1)];
      out__.write(beta_Taxon_3_Taxon_2);
      local_scalar_t__ beta_Taxon_3_Taxon_3 = DUMMY_VAR__;
      current_statement__ = 17;
      beta_Taxon_3_Taxon_3 = context__.vals_r("beta_Taxon_3_Taxon_3")[(1 -
        1)];
      out__.write_free_ub(0, beta_Taxon_3_Taxon_3);
      local_scalar_t__ epsilon_Taxon_3_Perturbation_Periodic = DUMMY_VAR__;
      current_statement__ = 18;
      epsilon_Taxon_3_Perturbation_Periodic = context__.vals_r("epsilon_Taxon_3_Perturbation_Periodic")[(1
        - 1)];
      out__.write(epsilon_Taxon_3_Perturbation_Periodic);
      local_scalar_t__ epsilon_Taxon_3_Perturbation_Square = DUMMY_VAR__;
      current_statement__ = 19;
      epsilon_Taxon_3_Perturbation_Square = context__.vals_r("epsilon_Taxon_3_Perturbation_Square")[(1
        - 1)];
      out__.write(epsilon_Taxon_3_Perturbation_Square);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"sigma", "alpha_Taxon_1",
                "beta_Taxon_1_Taxon_1", "beta_Taxon_1_Taxon_2",
                "beta_Taxon_1_Taxon_3",
                "epsilon_Taxon_1_Perturbation_Periodic",
                "epsilon_Taxon_1_Perturbation_Square", "alpha_Taxon_2",
                "beta_Taxon_2_Taxon_1", "beta_Taxon_2_Taxon_2",
                "beta_Taxon_2_Taxon_3",
                "epsilon_Taxon_2_Perturbation_Periodic",
                "epsilon_Taxon_2_Perturbation_Square", "alpha_Taxon_3",
                "beta_Taxon_3_Taxon_1", "beta_Taxon_3_Taxon_2",
                "beta_Taxon_3_Taxon_3",
                "epsilon_Taxon_3_Perturbation_Periodic",
                "epsilon_Taxon_3_Perturbation_Square"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "alpha_Taxon_1");
    param_names__.emplace_back(std::string() + "beta_Taxon_1_Taxon_1");
    param_names__.emplace_back(std::string() + "beta_Taxon_1_Taxon_2");
    param_names__.emplace_back(std::string() + "beta_Taxon_1_Taxon_3");
    param_names__.emplace_back(std::string() +
      "epsilon_Taxon_1_Perturbation_Periodic");
    param_names__.emplace_back(std::string() +
      "epsilon_Taxon_1_Perturbation_Square");
    param_names__.emplace_back(std::string() + "alpha_Taxon_2");
    param_names__.emplace_back(std::string() + "beta_Taxon_2_Taxon_1");
    param_names__.emplace_back(std::string() + "beta_Taxon_2_Taxon_2");
    param_names__.emplace_back(std::string() + "beta_Taxon_2_Taxon_3");
    param_names__.emplace_back(std::string() +
      "epsilon_Taxon_2_Perturbation_Periodic");
    param_names__.emplace_back(std::string() +
      "epsilon_Taxon_2_Perturbation_Square");
    param_names__.emplace_back(std::string() + "alpha_Taxon_3");
    param_names__.emplace_back(std::string() + "beta_Taxon_3_Taxon_1");
    param_names__.emplace_back(std::string() + "beta_Taxon_3_Taxon_2");
    param_names__.emplace_back(std::string() + "beta_Taxon_3_Taxon_3");
    param_names__.emplace_back(std::string() +
      "epsilon_Taxon_3_Perturbation_Periodic");
    param_names__.emplace_back(std::string() +
      "epsilon_Taxon_3_Perturbation_Square");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "alpha_Taxon_1");
    param_names__.emplace_back(std::string() + "beta_Taxon_1_Taxon_1");
    param_names__.emplace_back(std::string() + "beta_Taxon_1_Taxon_2");
    param_names__.emplace_back(std::string() + "beta_Taxon_1_Taxon_3");
    param_names__.emplace_back(std::string() +
      "epsilon_Taxon_1_Perturbation_Periodic");
    param_names__.emplace_back(std::string() +
      "epsilon_Taxon_1_Perturbation_Square");
    param_names__.emplace_back(std::string() + "alpha_Taxon_2");
    param_names__.emplace_back(std::string() + "beta_Taxon_2_Taxon_1");
    param_names__.emplace_back(std::string() + "beta_Taxon_2_Taxon_2");
    param_names__.emplace_back(std::string() + "beta_Taxon_2_Taxon_3");
    param_names__.emplace_back(std::string() +
      "epsilon_Taxon_2_Perturbation_Periodic");
    param_names__.emplace_back(std::string() +
      "epsilon_Taxon_2_Perturbation_Square");
    param_names__.emplace_back(std::string() + "alpha_Taxon_3");
    param_names__.emplace_back(std::string() + "beta_Taxon_3_Taxon_1");
    param_names__.emplace_back(std::string() + "beta_Taxon_3_Taxon_2");
    param_names__.emplace_back(std::string() + "beta_Taxon_3_Taxon_3");
    param_names__.emplace_back(std::string() +
      "epsilon_Taxon_3_Perturbation_Periodic");
    param_names__.emplace_back(std::string() +
      "epsilon_Taxon_3_Perturbation_Square");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_Taxon_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_1_Taxon_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_1_Taxon_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_1_Taxon_3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"epsilon_Taxon_1_Perturbation_Periodic\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"epsilon_Taxon_1_Perturbation_Square\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_Taxon_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_2_Taxon_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_2_Taxon_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_2_Taxon_3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"epsilon_Taxon_2_Perturbation_Periodic\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"epsilon_Taxon_2_Perturbation_Square\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_Taxon_3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_3_Taxon_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_3_Taxon_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_3_Taxon_3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"epsilon_Taxon_3_Perturbation_Periodic\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"epsilon_Taxon_3_Perturbation_Square\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_Taxon_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_1_Taxon_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_1_Taxon_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_1_Taxon_3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"epsilon_Taxon_1_Perturbation_Periodic\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"epsilon_Taxon_1_Perturbation_Square\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_Taxon_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_2_Taxon_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_2_Taxon_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_2_Taxon_3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"epsilon_Taxon_2_Perturbation_Periodic\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"epsilon_Taxon_2_Perturbation_Square\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_Taxon_3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_3_Taxon_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_3_Taxon_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_Taxon_3_Taxon_3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"epsilon_Taxon_3_Perturbation_Periodic\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"epsilon_Taxon_3_Perturbation_Square\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1)
      + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1)
      + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = test_glv_model_namespace::test_glv_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return test_glv_model_namespace::profiles__;
}
#endif